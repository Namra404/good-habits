import asyncio
from datetime import datetime, timezone
from uuid import UUID

from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from src.infra.repositories.postgres.factories import PostgresSessionFactory
from src.infra.repositories.postgres.models.notification_model import NotificationModel
from src.infra.repositories.postgres.user import PostgresUserRepository
from src.presentation.bot.bot_instance import bot

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

session_factory = PostgresSessionFactory()


async def send_notification_to_user(session: AsyncSession, user_id: UUID, message: str):
    user_repo = PostgresUserRepository(session)
    user = await user_repo.get_user_by_id(user_id)
    if not user:
        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user.tg_id, message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏


async def send_congratulatory_message(session: AsyncSession, user_id: UUID, progress_id: UUID):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_repo = PostgresUserRepository(session)
        tg_id, _ = await send_notification_to_user(session, user_id,
                                                   "")  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ tg_id

        # –ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —á–µ–∫-–∏–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üöÄ"

        # URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é)
        photo_url = "https://ir.ozone.ru/s3/multimedia-c/c1000/6064898436.jpg"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        await bot.send_photo(
            chat_id=tg_id,
            photo=photo_url,
            caption=message,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def send_notifications():
    while True:
        notifications_to_send = []
        async with session_factory.get_session() as session:
            now = datetime.utcnow().replace(tzinfo=timezone.utc)
            notifications = await session.scalars(
                select(NotificationModel)
                .filter(NotificationModel.status == 'pending')
                .filter(NotificationModel.send_time <= now)
            )

            for notification in notifications:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tg_id, message = await send_notification_to_user(session, notification.user_id,
                                                                     notification.message)
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await session.execute(
                        update(NotificationModel)
                        .where(NotificationModel.id == notification.id)
                        .values(status='sent')
                    )
                    notifications_to_send.append((tg_id, message))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {notification.id}: {e}")
                    await session.execute(
                        update(NotificationModel)
                        .where(NotificationModel.id == notification.id)
                        .values(status='failed')
                    )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for tg_id, message in notifications_to_send:
            try:
                await bot.send_message(chat_id=tg_id, text=message, parse_mode="Markdown")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è {tg_id}: {e}")

        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–µ–∫—É–Ω–¥
